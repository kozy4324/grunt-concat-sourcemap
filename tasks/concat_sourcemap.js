/*
 * grunt-concat-sourcemap
 * https://github.com/kozy4324/grunt-concat-sourcemap
 *
 * Copyright (c) 2013 Koji NAKAMURA
 * Licensed under the MIT license.
 */

'use strict';

module.exports = function(grunt) {

  var path = require('path');
  var url = require('url');

  var SourceMapConsumer = require('source-map').SourceMapConsumer;
  var SourceMapGenerator = require('source-map').SourceMapGenerator;
  var SourceNode = require('source-map').SourceNode;

  grunt.registerMultiTask('concat_sourcemap', 'Concatenate files and generate a source map.', function() {
    // source map file of input
    var sourceMaps = [];

    // Merge task-specific and/or target-specific options with these defaults.
    var options = this.options({
      separator: grunt.util.linefeed,
      sourceRoot: '',
      sourcesContent: false,
      process: undefined
    });

    // Iterate over all src-dest file pairs.
    this.files.forEach(function(f) {
      var destDir = path.dirname(f.dest);

      var sourceNode = new SourceNode();

      // Warn on and remove invalid source files (if nonull was set).
      var filepaths = f.src.filter(function(filepath) {
        if (!grunt.file.exists(filepath)) {
          grunt.log.warn('Source file "' + filepath + '" not found.');
          return false;
        } else {
          return true;
        }
      });

      // Concatenate files with using SourceNode.
      filepaths.forEach(function(filename) {
        // Read file source.
        var relativeFilename = path.relative(destDir, filename);
        var src = grunt.file.read(filename);

        if(typeof options.process === 'function') {
          src = options.process(src, filename);
        }

        if (/\/\/[@#]\s+sourceMappingURL=(.+)/.test(src) || /\/\*#\s+sourceMappingURL=([^\s]+)\s+\*\//.test(src)) {
          var sourceMappingURL = RegExp.$1;
          var sourceMapPath = path.resolve(path.dirname(filename), sourceMappingURL);
          var sourceMap = JSON.parse(grunt.file.read(sourceMapPath));

          // The source map generated by sass 3.3.0.rc.1 seems to be wrong format.
          if (typeof sourceMap.version === 'string') {
            sourceMap.version = parseInt(sourceMap.version, 10);
          }
          if (typeof sourceMap.names === 'undefined') {
            sourceMap.names = [];
          }

          var sourceMapConsumer = new SourceMapConsumer(sourceMap);
          var sourcePathToSourceMapPath = path.relative(destDir, path.dirname(sourceMapPath));
          sourceMaps.push([sourceMapConsumer, relativeFilename, sourcePathToSourceMapPath]);
          src = src.replace(/[@#]\s+sourceMappingURL=[^\s]+/, '');
          sourceNode.add(SourceNode.fromStringWithSourceMap(src, sourceMapConsumer, sourcePathToSourceMapPath));
        } else {
          var childNodeChunks = src.split('\n'), i, l;
          for (i = 0, l = childNodeChunks.length - 1; i < l; i++) {
            childNodeChunks[i] += '\n';
          }
          childNodeChunks.forEach(function(line, i) {
            sourceNode.add(new SourceNode(i + 1, 0, relativeFilename, line));
          });
        }
        sourceNode.add(new SourceNode(1, 0, undefined, options.separator));
        if(options.sourcesContent) {
          sourceNode.setSourceContent(relativeFilename, src);
        }
      });

      var mapfilepath = f.dest.split('/').pop() + '.map';
      if (/\.css$/.test(f.dest)) {
        sourceNode.add('/*# sourceMappingURL=' + mapfilepath + ' */');
      } else {
        sourceNode.add('//# sourceMappingURL=' + mapfilepath);
      }

      var code_map = sourceNode.toStringWithSourceMap({
        file: f.dest,
        sourceRoot: options.sourceRoot
      });

      // Write the destination file.
      grunt.file.write(f.dest, code_map.code);

      // Write the source map file.
      var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(code_map.map.toJSON()));
      sourceMaps.forEach(function(sourceMap){
        generator.applySourceMap(sourceMap[0], sourceMap[1], sourceMap[2]);
      });

      if(options.sourcesContent) {
        sourceMaps.forEach(function(sourceMap){
          var sourceMapConsumer = sourceMap[0];
          var sourcesContent = sourceMapConsumer.sourcesContent;
          sourceMapConsumer.sources.forEach(function(source, index){
            var content = sourcesContent && sourcesContent[index] || grunt.file.read(path.resolve(destDir, source));
            generator.setSourceContent(source, content);
          });
        });
      }

      var newSourceMap = generator.toJSON();
      newSourceMap.file = path.basename(newSourceMap.file);
      grunt.file.write(f.dest + '.map', JSON.stringify(newSourceMap, null, '  '));

      // Print a success message.
      grunt.log.writeln('File "' + f.dest + '" created.');
    });
  });

};
